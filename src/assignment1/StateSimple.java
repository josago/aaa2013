package assignment1;

import java.util.Arrays;
import java.util.Iterator;

public class StateSimple implements State
{	
	private final int[] x, y;
	
	public StateSimple(int predatorX, int predatorY, int preyX, int preyY)
	{
		x = new int[2];
		y = new int[2];
		
		x[Agent.TYPE_PREY]     = preyX;
		x[Agent.TYPE_PREDATOR] = predatorX;

		y[Agent.TYPE_PREY]     = preyY;
		y[Agent.TYPE_PREDATOR] = predatorY;
	}
	
	public static int fixCoord(int c)
	{
		return (c + ENVIRONMENT_SIZE) % ENVIRONMENT_SIZE;
	}
	
	@Override
	public Iterator<State> stateIterator()
	{
		class IteratorStates implements Iterator<State>
		{
			private boolean hasNext;
			
			private final int[] x, y;
			
			public IteratorStates()
			{
				hasNext = true;
				
				x = new int[2];
				y = new int[2];
			}
			
			@Override
			public boolean hasNext()
			{
				return hasNext;
			}

			@Override
			public State next()
			{
				State nextState = new StateSimple(x[Agent.TYPE_PREDATOR], y[Agent.TYPE_PREDATOR], x[Agent.TYPE_PREY], y[Agent.TYPE_PREY]);
				
				x[Agent.TYPE_PREY]++;
				
				if (x[Agent.TYPE_PREY] >= ENVIRONMENT_SIZE)
				{
					x[Agent.TYPE_PREY] = 0;
					
					x[Agent.TYPE_PREDATOR]++;
					
					if (x[Agent.TYPE_PREDATOR] >= ENVIRONMENT_SIZE)
					{
						x[Agent.TYPE_PREDATOR] = 0;
						
						y[Agent.TYPE_PREY]++;
						
						if (y[Agent.TYPE_PREY] >= ENVIRONMENT_SIZE)
						{
							y[Agent.TYPE_PREY] = 0;
							
							y[Agent.TYPE_PREDATOR]++;
							
							if (y[Agent.TYPE_PREDATOR] >= ENVIRONMENT_SIZE)
							{
								hasNext = false;
							}
						}
					}
				}
				
				return nextState;
			}

			@Override
			public void remove()
			{
				// TODO Auto-generated method stub
			}
		}
		
		return new IteratorStates();
	}
	
	@Override
	public boolean isFinal()
	{
		return x[Agent.TYPE_PREY] == x[Agent.TYPE_PREDATOR]
			&& y[Agent.TYPE_PREY] == y[Agent.TYPE_PREDATOR];
	}

	@Override
	public int getX(Agent agent)
	{
		return x[agent.getType()];
	}
	
	@Override
	public int getY(Agent agent)
	{
		return y[agent.getType()];
	}

	@Override
	public void move(Agent agent)
	{
		float sum    = 0;
		float random = (float) Math.random();
		
		for (int action: AGENT_ACTIONS)
		{
			sum += agent.pi(this, action);
			
			if (sum >= random)
			{
				move(agent, action);
				
				break;
			}
		}
	}
	
	@Override
	public void move(Agent agent, int action)
	{
		int type = agent.getType();
		
		if (action % 2 == 0)
		{
			x[type] = fixCoord(x[type] + action / 2);
		}
		else
		{
			y[type] = fixCoord(y[type] + action);
		}
	}
	
	@Override
	public Object clone()
	{
		return new StateSimple(x[Agent.TYPE_PREDATOR], y[Agent.TYPE_PREDATOR], x[Agent.TYPE_PREY], y[Agent.TYPE_PREY]);
	}
	
	// Automatically-generated by Eclipse:

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(x);
		result = prime * result + Arrays.hashCode(y);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		StateSimple other = (StateSimple) obj;
		if (!Arrays.equals(x, other.x))
			return false;
		if (!Arrays.equals(y, other.y))
			return false;
		return true;
	}
}
